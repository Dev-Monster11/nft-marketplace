import { StringPublicKey } from '../../utils/ids';
import { TokenAccount } from '../../models';
import { Metadata, SafetyDepositBox } from '../../actions';
import { StoreIndexer, AuctionManagerV1, AuctionManagerV2, WhitelistedCreator } from '../../models/metaplex';
import { Connection, PublicKey } from '@solana/web3.js';
import { AccountAndPubkey, MetaState, ProcessAccountsFunc, UpdateStateValueFunc } from './types';
import { ParsedAccount } from '../accounts/types';
export declare const USE_SPEED_RUN = false;
export declare const pullStoreMetadata: (connection: Connection, tempCache: MetaState) => Promise<MetaState>;
export declare const pullYourMetadata: (connection: Connection, userTokenAccounts: TokenAccount[], tempCache: MetaState) => Promise<MetaState>;
export declare const pullPayoutTickets: (connection: Connection, tempCache: MetaState) => Promise<MetaState>;
export declare const loadSafeteyDepositBoxesForVaults: (connection: Connection, vaults: StringPublicKey[]) => Promise<MetaState>;
export declare const pullAuctionSubaccounts: (connection: Connection, auction: StringPublicKey, tempCache: MetaState) => Promise<MetaState>;
export declare const pullPages: (connection: Connection) => Promise<ParsedAccount<StoreIndexer>[]>;
export declare const pullPage: (connection: Connection, page: number, tempCache: MetaState, walletKey?: PublicKey | null | undefined, shouldFetchNftPacks?: boolean | undefined) => Promise<MetaState>;
export declare const limitedLoadAccounts: (connection: Connection) => Promise<MetaState>;
export declare const loadStoreIndexers: (connection: Connection) => Promise<MetaState>;
export declare const loadMetadataForUsers: (connection: Connection, userTokenAccounts: TokenAccount[], whitelistedCreatorsByCreator: Record<string, ParsedAccount<WhitelistedCreator>>) => Promise<MetaState>;
export declare const loadAccounts: (connection: Connection, ownerAddress: StringPublicKey) => Promise<MetaState>;
export declare const loadVaultsAndContentForAuthority: (connection: Connection, walletPubkey: StringPublicKey) => Promise<MetaState>;
export declare const loadPayoutTickets: (connection: Connection) => Promise<MetaState>;
export declare const loadCreators: (connection: Connection) => Promise<MetaState>;
export declare const loadAuctionManagers: (connection: Connection, storeAddress: StringPublicKey) => Promise<MetaState>;
export declare const loadAuctionsForAuctionManagers: (connection: Connection, auctionManagers: ParsedAccount<AuctionManagerV1 | AuctionManagerV2>[]) => Promise<MetaState>;
export declare const loadPrizeTrackingTickets: (connection: Connection, auctionManager: ParsedAccount<AuctionManagerV1 | AuctionManagerV2>, metadata: ParsedAccount<Metadata>[]) => Promise<MetaState>;
export declare const loadMetaDataAndEditionsForCreators: (connection: Connection, whitelistedCreatorsByCreator: Record<string, ParsedAccount<WhitelistedCreator>>) => Promise<MetaState>;
export declare const querySafetyDepositBoxByVault: (connection: Connection, vaultPublicKey: StringPublicKey) => Promise<MetaState>;
export declare const loadArtwork: (connection: Connection, whitelistedCreatorsByCreator: Record<string, ParsedAccount<WhitelistedCreator>>, key: StringPublicKey) => Promise<MetaState>;
export declare const loadBidsForAuction: (connection: Connection, auctionPubkey: StringPublicKey) => Promise<MetaState>;
export declare const loadAuction: (connection: Connection, auctionManager: ParsedAccount<AuctionManagerV1 | AuctionManagerV2>) => Promise<MetaState>;
export declare const loadMetadataAndEditionsBySafetyDepositBoxes: (connection: Connection, safetyDepositBoxesByVaultAndIndex: Record<string, ParsedAccount<SafetyDepositBox>>, whitelistedCreatorsByCreator: Record<string, ParsedAccount<WhitelistedCreator>>) => Promise<MetaState>;
export declare const loadMetadataForCreator: (connection: Connection, creator: ParsedAccount<WhitelistedCreator>) => Promise<MetaState>;
export declare const pullMetadataByKeys: (connection: Connection, state: MetaState, metadataKeys: StringPublicKey[]) => Promise<MetaState>;
export declare const makeSetter: (state: MetaState) => UpdateStateValueFunc<MetaState>;
export declare const processingAccounts: (updater: UpdateStateValueFunc) => (fn: ProcessAccountsFunc) => (accounts: AccountAndPubkey[]) => Promise<void>;
export declare const metadataByMintUpdater: (metadata: ParsedAccount<Metadata>, state: MetaState) => Promise<MetaState>;
export declare const initMetadata: (metadata: ParsedAccount<Metadata>, whitelistedCreators: Record<string, ParsedAccount<WhitelistedCreator>>, setter: UpdateStateValueFunc) => Promise<void>;
export declare const loadMultipleAccounts: (conn: Connection, keys: StringPublicKey[], commitment: string) => Promise<MetaState>;
//# sourceMappingURL=loadAccounts.d.ts.map